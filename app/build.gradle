import org.eclipse.jgit.api.Git
import org.eclipse.jgit.internal.storage.file.FileRepository

import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def repo = new FileRepository(rootProject.file(".git"))
def refId = repo.refDatabase.exactRef("refs/remotes/origin/main").objectId
def gitCommitCount = new Git(repo).log().add(refId).call().size()

android {
    compileSdkVersion 30
    buildToolsVersion '31.0.0'
    defaultConfig {
        applicationId 'me.gm.cleaner.plugin'
        minSdkVersion 29
        targetSdkVersion 30
        versionCode gitCommitCount
        versionName "alpha"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled false
        resConfigs 'en', 'zh-rCN', 'zh-rTW'
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "Media Provider Manager_${defaultConfig.versionName}-${variant.buildType.name}.apk"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    packagingOptions {
        exclude '/META-INF/**'
        exclude '/kotlin/**'
        exclude '/okhttp3/**'
    }
}

def optimizeReleaseRes = task('optimizeReleaseRes').doLast {
    def aapt2 = Paths.get(project.android.sdkDirectory.path, 'build-tools', project.android.buildToolsVersion, 'aapt2')
    def zip = Paths.get(project.buildDir.path, 'intermediates', 'processed_res', 'release', 'out', "resources-release.ap_")
    def optimized = new File("${zip}.opt")
    def cmd = exec {
        commandLine aapt2, 'optimize', '--collapse-resource-names',
                '--enable-sparse-encoding',
                '--shorten-resource-paths',
                '-o', optimized, zip
        ignoreExitValue false
    }
    if (cmd.exitValue == 0) {
        delete(zip)
        optimized.renameTo("$zip")
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'processReleaseResources') {
        task.finalizedBy optimizeReleaseRes
    }
}

dependencies {
    compileOnly files('libs/XposedBridgeApi-89.jar')
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.google.android.material:material:1.4.0'
    def androidx_lifecycle_version = '2.3.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1"

    def appCenterSdkVersion = '4.2.0'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

    implementation 'dev.rikka.rikkax.preference:simplemenu-preference:1.0.3'
    implementation 'dev.rikka.rikkax.material:material:1.6.5'
    implementation 'dev.rikka.rikkax.widget:borderview:1.0.1'
    implementation 'dev.rikka.rikkax.recyclerview:recyclerview-ktx:1.2.2'

    def coil_version = '1.3.1'
    implementation "io.coil-kt:coil:$coil_version"
    implementation 'me.zhanghai.android.appiconloader:appiconloader-coil:1.3.1'
}

configurations.all {
    exclude group: 'androidx.appcompat', module: 'appcompat'
}
